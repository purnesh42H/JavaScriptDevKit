'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.generator = undefined;

var _random2 = require('lodash/random');

var _random3 = _interopRequireDefault(_random2);

var _sample2 = require('lodash/sample');

var _sample3 = _interopRequireDefault(_sample2);

var _result2 = require('lodash/result');

var _result3 = _interopRequireDefault(_result2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _types = require('../types');

var _uuid = require('../tools/uuid');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var createFaker = function createFaker() {
	// eslint-disable-next-line no-console
	console.warn("Faker has been stripped from the production build");
	return false;
};
if (process.env.NODE_ENV !== 'production') createFaker = function createFaker() {
	return require('faker');
};

/* Generate some fake information based on the type of a field.
 * If the field type is an object, then we handle first the
 * __faker case, and second the __pattern case.
 *
 * if the __faker property is set, generate fake information
 * using fakerjs.
 *
 * If the __pattern property is set, split the property by the
 * delimiter "|" and select one of the resulting strings
 * */
var generator = exports.generator = function generator(fakerInstance) {
	return function (field) {
		var type = field.type,
		    faker = field.faker,
		    pattern = field.pattern,
		    min = field.min,
		    max = field.max,
		    decimal = field.decimal;


		if (faker) {
			fakerInstance = fakerInstance || createFaker();

			if (!fakerInstance) return generator(fakerInstance)(_extends({}, field, { faker: null }));
			return (0, _result3.default)(fakerInstance, faker);
		}

		if (pattern) {
			var options = pattern.split("|");
			var result = (0, _sample3.default)(options);

			if (type === Number) return parseInt(result);
			return result;
		}

		switch (type) {
			case String:
				{
					return (0, _uuid.v4)().substring(0, 7);
				}

			case Number:
				{
					return (0, _random3.default)(min || -10000, max || 10000, decimal || false);
				}

			case Boolean:
				{
					return !!(0, _random3.default)(1);
				}
		}
	};
};