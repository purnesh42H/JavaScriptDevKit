'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _mapValues2 = require('lodash/mapValues');

var _mapValues3 = _interopRequireDefault(_mapValues2);

var _mapKeys2 = require('lodash/mapKeys');

var _mapKeys3 = _interopRequireDefault(_mapKeys2);

var _types = require('../types');

var _normalizr = require('normalizr');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A function that normalizes data based on specified model relationships using
 * normalizr.
 *
 * This will map over the provided models and pass in a normalizr schema containing
 * each models schema. If the entities from the response that match the model are
 * an array, the schema will be wrapped in arrayOf().
 */
exports.default = function (_ref) {
	var data = _ref.data,
	    modelFunctions = _ref.modelFunctions,
	    clientState = _ref.clientState;
	var models = clientState.models;

	/* Create a map of ModelFunctions who's keys match
  * those of the Data result
  * */

	var keyedFunctions = (0, _mapKeys3.default)(modelFunctions, function (modelFunction) {
		return modelFunction.fieldName;
	});

	if (!data) return {};
	return (0, _normalizr.normalize)(data, (0, _mapValues3.default)(keyedFunctions, function (modelFunction) {
		var entities = data[modelFunction.fieldName];
		var modelData = models[modelFunction.modelName];

		if (Array.isArray(entities)) return (0, _normalizr.arrayOf)(modelData.normalizrSchema);
		return modelData.normalizrSchema;
	}));
};