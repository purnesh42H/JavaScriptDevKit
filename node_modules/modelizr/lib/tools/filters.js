'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.normalizeModelData = exports.normalizeFunctionParameters = exports.stripRelationships = undefined;

var _mapKeys2 = require('lodash/mapKeys');

var _mapKeys3 = _interopRequireDefault(_mapKeys2);

var _mapValues2 = require('lodash/mapValues');

var _mapValues3 = _interopRequireDefault(_mapValues2);

var _pickBy2 = require('lodash/pickBy');

var _pickBy3 = _interopRequireDefault(_pickBy2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _types = require('../types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Strips a collection of fields of all model relationships
 * */
var stripRelationships = exports.stripRelationships = function stripRelationships(fields) {
	return (0, _pickBy3.default)(fields, function (field) {
		var check = function check(type) {
			return typeof type !== "string";
		};

		if (Array.isArray(field.type)) {
			return check(field.type[0]);
		}
		return check(field.type);
	});
};

/* Given three parameters, figure out the type of each param and return
 * a corrected set of parameters.
 * */
var normalizeFunctionParameters = exports.normalizeFunctionParameters = function normalizeFunctionParameters(name, params, models) {
	var trueModels = models;
	var trueName = void 0,
	    trueParams = {};

	if (typeof name === 'string') {
		trueName = name;

		if (typeof params === 'function') trueModels.unshift(params);
		if ((typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object') trueParams = params;
	} else {
		if (params) trueModels.unshift(params);

		if (typeof name === 'function') trueModels.unshift(name);
		if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') trueParams = name;
	}

	return { name: trueName, params: trueParams, models: trueModels };
};

var normalizeModelData = exports.normalizeModelData = function normalizeModelData(modelData) {
	var normalizedData = (0, _mapValues3.default)(modelData, function (model) {
		var normalize = function normalize(fields) {
			return (0, _mapValues3.default)(fields, function (field) {
				if ((typeof field === 'undefined' ? 'undefined' : _typeof(field)) === "object" && !Array.isArray(field)) {
					var type = field.type;
					if (Array.isArray(type)) type = type[0];

					if (type === Object) {
						return _extends({}, field, {
							properties: normalize(field.properties)
						});
					}
					return field;
				}

				return {
					type: field
				};
			});
		};

		if (model.fields) {
			return _extends({}, model, {
				fields: normalize(model.fields)
			});
		}

		/* Describe the model schema as a union */
		if (model.models && model.schemaAttribute) {
			return _extends({}, model, {
				_unionDataType: true
			});
		}

		return model;
	});

	return (0, _mapKeys3.default)(normalizedData, function (model, modelName) {
		if (model.name) return model.name;
		return modelName;
	});
};